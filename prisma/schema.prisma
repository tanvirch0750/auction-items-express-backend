// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  fullName      String
  email         String   @unique
  contactNumber String
  password      String
  gender        Gender
  imageUrl      String
  address       String
  role          UserRole @default(user)

  userProducts          Product[]
  winingProducts        AuctionWinner[]
  auctionBiddingHistory AuctionBiddingHistory[]
  messages              ProductMessage[]

  @@map("users")
}

model ProductCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  categoryName  String    @unique
  description   String?
  categoryImage String?
  products      Product[]

  @@map("productCategory")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  productName         String
  description         String
  imageUrl            String
  auctionDate         String
  auctionTime         String
  auctionStatus       AuctionStatus
  initialBiddingPrice Float
  currentBiddingPrice Float
  incrementAmount     Float

  bidApprove     Boolean? @default(false)
  productReceive Boolean? @default(false)

  productOwnerId String
  productOwner   User   @relation(fields: [productOwnerId], references: [id])

  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id])

  winnigPrice           Float?
  auctionWinner         AuctionWinner?
  auctionBiddingHistory AuctionBiddingHistory[]
  messages              ProductMessage[]

  @@map("products")
}

model AuctionWinner {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  auctionWinnerId String
  auctionWinner   User   @relation(fields: [auctionWinnerId], references: [id])

  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  payment   Payment?

  @@map("auctionWinners")
}

model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  paymentStatus PaymentStatus @default(notPaid)
  transactionId String?

  productReceived Boolean @default(false)

  auctionWinnerId String        @unique
  auctionWinner   AuctionWinner @relation(fields: [auctionWinnerId], references: [id])

  @@map("payment")
}

model AuctionBiddingHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  productId String
  product   Product @relation(fields: [productId], references: [id])

  bidderId String
  bidder   User   @relation(fields: [bidderId], references: [id])

  amount Float

  @@map("auctionBiddingHistory")
}

model ProductMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  content  String
  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("productMessages")
}

enum UserRole {
  admin
  user
}

enum Gender {
  male
  female
  others
}

enum AuctionStatus {
  ongoing
  notStarted
  end
}

enum PaymentStatus {
  paid
  notPaid
}
